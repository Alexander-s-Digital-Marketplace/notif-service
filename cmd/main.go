/*
 * Catering service
 *
 * Notif service.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package main

import (
	"log"
	"net"

	loggerconfig "github.com/Alexander-s-Digital-Marketplace/notif-service/internal/config/logger"
	pb "github.com/Alexander-s-Digital-Marketplace/notif-service/internal/services/notification_service"
	notificationserviceserver "github.com/Alexander-s-Digital-Marketplace/notif-service/internal/services/notification_service_server"
	rabbitmq "github.com/Alexander-s-Digital-Marketplace/notif-service/internal/utils/RabbitMQ"
	"google.golang.org/grpc"
)

func main() {
	loggerconfig.Init()

	var rmq rabbitmq.RabbitMQ
	rmq.InitConnection()
	rmq.InitChannel()
	rmq.InitConsumer("reset_email", "reset")
	rmq.InitConsumer("deliver_email", "deliver")
	rmq.InitConsumer("sell_email", "sell")
	go rmq.ConsumeReset()
	go rmq.ConsumeDeliver()
	go rmq.ConsumeSell()

	listener, err := net.Listen("tcp", ":50053")
	if err != nil {
		log.Fatalf("Failed to listen: %v", err)
	}

	grpcServer := grpc.NewServer()

	pb.RegisterNotificationServiceServer(grpcServer, &notificationserviceserver.Server{Rmq: &rmq})

	log.Println("gRPC server is running on port :50053")
	if err := grpcServer.Serve(listener); err != nil {
		log.Fatalf("Failed to serve gRPC server: %v", err)
	}

}

/*
 * Catering service
 *
 * Notif service.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package main

import (
	"log"
	"net"

	loggerconfig "github.com/KusakinDev/Catering-Notif-Service/internal/config/logger"
	grpcnotifnewmenu "github.com/KusakinDev/Catering-Notif-Service/internal/handlers/grpc_notif_new_menu"
	routerpkg "github.com/KusakinDev/Catering-Notif-Service/internal/routes"
	pb "github.com/KusakinDev/Catering-Notif-Service/internal/services/notif_new_menu/notif_new_menu"
	rabbitmq "github.com/KusakinDev/Catering-Notif-Service/internal/utils/RabbitMQ"
	"google.golang.org/grpc"
)

func main() {
	loggerconfig.Init()

	go func() {
		var rmqDish rabbitmq.RabbitMQ
		rmqDish.InitConnection()
		rmqDish.InitChannel()
		rmqDish.InitConsumer("dishQueue")
		go rmqDish.ConsumeNotifDish()

		routes := routerpkg.ApiHandleFunctions{}
		routes.DefaultAPI.RMQ = &rmqDish

		log.Printf("Server started")

		router := routerpkg.NewRouter(routes)

		log.Fatal(router.Run(":8082"))
	}()

	go func() {
		var rmqMenu rabbitmq.RabbitMQ
		rmqMenu.InitConnection()
		rmqMenu.InitChannel()
		rmqMenu.InitConsumer("menuQueue")
		go rmqMenu.ConsumeNotifMessage()

		listener, err := net.Listen("tcp", ":50051")
		if err != nil {
			log.Fatalf("Failed to listen: %v", err)
		}

		grpcServer := grpc.NewServer()

		pb.RegisterNotifNewMenuServiceServer(grpcServer, &grpcnotifnewmenu.Server{Rmq: &rmqMenu})

		log.Println("gRPC server is running on port :50051")
		if err := grpcServer.Serve(listener); err != nil {
			log.Fatalf("Failed to serve gRPC server: %v", err)
		}
	}()

	select {}

}
